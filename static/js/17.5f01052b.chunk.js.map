{"version":3,"file":"static/js/17.5f01052b.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"list_item\":\"ContactsList_list_item__vxZgU\",\"button_delete\":\"ContactsList_button_delete__os7eD\"};","\nexport const getContacts = (state) => state.contacts.contacts;\nexport const getFilter = (state) => state.filter;\nexport const selectLoading = state => state.contacts.loading;\n\n\nexport const getVisibleContacts = state => {\n    const contacts = getContacts(state); \n    const filter = getFilter(state); \n    const normalizedFilter = filter.toLowerCase(); \n  \n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n","import css from './ContactsList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts, deleteContact } from '../../redux/contacts/operations';\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  // const contacts = useSelector(getContacts);\n  // const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const contacts = useSelector(getVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // const filteredContacts = contacts?.filter(contact =>\n  //   contact?.name?.toLowerCase().includes(filter.toLowerCase())\n  // );\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  if (!contacts?.length) {\n    return 'No contacts found';\n  }\n\n  return (\n    <ul className={css.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={css.list_item} key={id}>\n          <p>{name + ' : ' + number}</p>\n          <button\n            className={css.button_delete}\n            type=\"submit\"\n            onClick={() => handleDelete(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"button\":\"ContactForm_button__eSwX9\",\"input\":\"ContactForm_input__Bl93P\",\"paragraph\":\"ContactForm_paragraph__nRyTj\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      id: nanoid(),\n      name: e.currentTarget.elements.name.value,\n      phone: e.currentTarget.elements.number.value,\n    };\n\n    const nameExist = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (nameExist) {\n      return toast.warn(`${contact.name} is already in contacts.`);\n    }\n    dispatch(addContact(contact));\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label>\n        <p className={css.paragraph}>Name</p>\n        <input\n          className={css.input}\n          id={nanoid()}\n          type=\"text\"\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        <p className={css.paragraph}>Number</p>\n        <input\n          className={css.input}\n          id={nanoid()}\n          type=\"tel\"\n          name=\"number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from './../redux/contacts/operations';\nimport { selectLoading } from './../redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","selectLoading","loading","getVisibleContacts","filter","getFilter","normalizedFilter","toLowerCase","contact","name","includes","ContactsList","dispatch","useDispatch","useSelector","useEffect","fetchContacts","length","_jsx","className","css","children","map","_ref","id","number","_jsxs","type","onClick","deleteContact","handleDelete","nanoid","size","arguments","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","onSubmit","e","preventDefault","currentTarget","elements","value","phone","find","toast","concat","addContact","reset","title","required","Contacts","isLoading","_Fragment","Helmet"],"sourceRoot":""}